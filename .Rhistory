xlab="Year", ylab="Total PM2.5 Emissions", col="red")
emissionsByYear <-aggregate(NEI$Emissions, list(NEI$year), FUN="sum")
plot(emissionsByYear, type="l", main="Evolution of PM2.5 emissions in the United States from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red")
plot(emissionsByYear, type="l", main="Evolution of PM2.5 emissions in the United States from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=10)
plot(emissionsByYear, type="l", main="Evolution of PM2.5 emissions in the United States from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=5)
plot(emissionsByYear, type="l", main="Evolution of PM2.5 emissions in the United States from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=3)
plot(emissionsByYear, type="h", main="Evolution of PM2.5 emissions in the United States from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=10)
plot(emissionsByYear, type="h", main="Evolution of PM2.5 emissions in the United States from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=100)
plot(emissionsByYear, type="h", main="Evolution of PM2.5 emissions in the United States from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=80)
plot(emissionsByYear, type="h", main="Evolution of PM2.5 emissions in the United States from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=50)
plot(emissionsByYear, type="h", main="Evolution of PM2.5 emissions in the United States from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=25)
plot(emissionsByYear, type="b", main="Evolution of PM2.5 emissions in the United States from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=3)
plot(emissionsByYear, type="l", main="Evolution of PM2.5 emissions in Baltimore City, Maryland from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=3)
library(ggplot2)
g <- ggplot(NEI, aes(year, Emissions, color=type))
g + geom_line(stat = "summary", fun.y = "sum") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle("Emissions in Baltimore City by Type")
png("plot1.png", width=480, height=480, px="px")
emissionsByYear <-aggregate(NEI$Emissions, list(NEI$year), FUN="sum")
plot(emissionsByYear, type="b", main="Evolution of PM2.5 emissions in the United States from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=3)
dev.off()
png("plot1.png", width=480, height=480, px="px")
png("plot1.png", width=480, height=480, px="px")
png("plot1.png", width=480, height=480, units="px")
emissionsByYear <-aggregate(NEI$Emissions, list(NEI$year), FUN="sum")
plot(emissionsByYear, type="b", main="Evolution of PM2.5 emissions in the United States from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=3)
dev.off()
png("plot1.png", width=480, height=480, units="px")
emissionsByYear <-aggregate(NEI$Emissions, list(NEI$year), FUN="sum")
plot(emissionsByYear, type="b", main="Evolution of PM2.5 emissions in the United States from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=3)
dev.off()
### Plot 1
## Read data files
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
png("plot1.png", width=480, height=480, units="px")
emissionsByYear <-aggregate(NEI$Emissions, list(NEI$year), FUN="sum")
plot(emissionsByYear, type="b", main="Evolution of PM2.5 emissions in the United States from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=3)
dev.off()
### Plot 2
## Read data files
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- NEI[NEI$fips=="24510",]
png("plot2.png", width=480, height=480, units="px")
emissionsByYear <-aggregate(NEI$Emissions, list(NEI$year), FUN="sum")
plot(emissionsByYear, type="l", main="Evolution of PM2.5 emissions in Baltimore City, Maryland from 1999 to 2008",
xlab="Year", ylab="Total PM2.5 Emissions", col="red", lwd=3)
dev.off()
### Plot 3
library(ggplot2)
## Read data files
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- NEI[NEI$fips=="24510",]
png("plot3.png", width=480, height=480, units="px")
g <- ggplot(NEI, aes(year, Emissions, color=type))
g + geom_line(stat = "summary", fun.y = "sum") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle("Emissions in Baltimore City by Type")
dev.off()
### Plot 4
## Read data files
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
png("plot4.png", width=480, height=480, units="px")
coal <- grep("coal", sccData$Short.Name, ignore.case = T)
coalSCC <- SCC[grepl("coal", SCC$Short.Name, ignore.case=TRUE]
coalNEI <- NEI[NEI$SCC %in% coalSCC$SCC,]
coalEmissions <- aggregate(coalNEI$Emissions, list(coalNEI$year), FUN="sum")
plot(coalEmissions, type = "l", xlab = "Year",
main = "Total Emissions From Coal Combustion-related Sources",
ylab = "Total PM2.5 Emissions")
dev.off()
coalSCC <- SCC[grepl("coal", SCC$Short.Name, ignore.case=TRUE]
coalSCC <- SCC[grepl("coal", SCC$Short.Name, ignore.case=TRUE),]
coalNEI <- NEI[NEI$SCC %in% coalSCC$SCC,]
coalEmissions <- aggregate(coalNEI$Emissions, list(coalNEI$year), FUN="sum")
plot(coalEmissions, type = "l", xlab = "Year",
main = "Total Emissions From Coal Combustion-related Sources",
ylab = "Total PM2.5 Emissions")
png("plot4.png", width=480, height=480, units="px")
coalSCC <- SCC[grepl("coal", SCC$Short.Name, ignore.case=TRUE),]
coalNEI <- NEI[NEI$SCC %in% coalSCC$SCC,]
coalEmissions <- aggregate(coalNEI$Emissions, list(coalNEI$year), FUN="sum")
plot(coalEmissions, type = "l", xlab = "Year",
main = "Emissions From Coal Combustion-related Sources",
ylab = "Total PM2.5 Emissions")
dev.off()
NEI <- NEI[NEI$fips=="24510",]
png("plot3.png", width=480, height=480, units="px")
g <- ggplot(NEI, aes(year, Emissions, color=type))
g + geom_line(stat = "summary", fun.y="sum") +
ylab("Total PM2.5 Emissions") +
ggtitle("Emissions in Baltimore City by Type")
dev.off()
### Plot 5
## Read data files
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- NEI[NEI$fips=="24510",]
png("plot5.png", width=480, height=480, units="px")
motorSCC <- SCC[grepl("motor", SCC$Short.Name, ignore.case=TRUE),]
motorNEI <- NEI[NEI$SCC %in% motorSCC$SCC,]
motorEmissions <- aggregate(motorNEI$Emissions, list(motorNEI$year), FUN="sum")
plot(motorEmissions, type = "l", xlab = "Year",
main = "Emissions From Motor Vehicle Sources",
ylab = "Total PM2.5 Emissions")
dev.off()
### Plot 6
library(ggplot2)
## Read data files
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- NEI[NEI$fips=="24510" | NEI$fips=="06037",]
png("plot6.png", width=480, height=480, units="px")
motorSCC <- SCC[grepl("motor", SCC$Short.Name, ignore.case=TRUE),]
motorNEI <- NEI[NEI$SCC %in% motorSCC$SCC,]
motorEmissions <- aggregate(motorNEI$Emissions, list(motorNEI$year), FUN="sum")
motor <- grep("motor", sccData$Short.Name, ignore.case = T)
motor <- sccData[motor, ]
motor <- subset[subset$SCC %in% motor$SCC, ]
g <- ggplot(motorNEI, aes(year, Emissions, color=fips))
g + geom_line(stat="summary", fun.y="sum") +
ylab("Total PM2.5 Emissions") +
ggtitle("Comparison of Emissions From Motor\n Vehicle Sources in Baltimore City\n vs Los Angeles County from 1999 to 2008") +
scale_colour_discrete(name="Group", label=c("Los Angeles","Baltimore"))
dev.off()
source('~/coursera_r/plots2.R', echo=TRUE)
# Read Features names to use
featuresNames <- read.table("UCI HAR Dataset/features.txt")
featuresNames <- featuresNames[grepl("-mean()",featuresNames$V2,fixed=TRUE)|grepl("-std()",featuresNames$V2,fixed=TRUE),c(1,2)]
colnames(featuresNames) <- c("id", "name")
# Read Activities names
activitiesNames <- read.table("UCI HAR Dataset/activity_labels.txt")
colnames(activitiesNames) <- c("id", "name")
activitiesNames$name
fefeaturesNames$name
featuresNames$name
write.table(featuresNames$name, "UCI HAR Dataset/feat", row.names=FALSE, quote=FALSE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", ACS_Housing_Idaho.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "ACS_Housing_Idaho.csv"")
Q
a
a
a
a
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "ACS_Housing_Idaho.csv")
h <- read.csv("ACS_Housing_Idaho.csv")
head(h)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "GDP_190")
gdp <- read.csv("GDP_190")
head(gdp)
gdp[1:4,] <- NULL
head(gdp)
grep("^United",gdp$X.2), 4
grep("^United",gdp$X.2)
grepl("^United",gdp$X.2)
gdpUnitedBool <- grepl("^United",gdp$X.2)
gdpUnited <- gdp[gdpUnitedBool]
gdpUnited <- gdp[gdpUnitedBool,]
gdpUnited
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", GDP_Educational_Data.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "GDP_Educational_Data.csv")
edu <- read.csv("GDP_Educational_Data.csv")
head(edu)
head(edu,2)
?merge
head(gdp)
tail(gdp)
names(gdp) <- c("ctryCode","ranking","tres","ctryName","gdp","6","7","8","9","10")
head(gdp)
gdp2 <- gdp[gdp$ranking>0,]
gdp2 <- gdp[as.numeric(gdp$ranking)>0,]
head(gdp2)
tail(gdp2)
gdp$ranking <- as.numeric(gdp$ranking)
tail(gdp)
head(gdp)
gdp$ranking <- gdp2$ranking)
gdp$ranking <- gdp2$ranking
head(gdp)
tail(gdp)
gdp2 <- gdp[!is.null(gdp$ranking),]
head(gdp2)
gdp[!is.null(gdp$ranking),]
!is.null(gdp$ranking),]
!is.null(gdp$ranking)
is.null(gdp$ranking)
gdp[!is.null(ranking),]
is.null(gdp[,3])
is.null(gdp[,3])
gdp2 <- gdp[gdp$ranking==1,]
gdp2
gdp2 <- gdp[gdp$ranking>0&gdp$ranking<200,]
gdp2 <- gdp[gdp$ranking>=0&gdp$ranking<=200,]
gdp2 <- gdp[5:235,]
gdp2
gdp2 <- gdp[5:194,]
gdp2
m <- merge(gdp2,edu,by.x=ctryCode,by.y=CountryCode)
m <- merge(gdp2,edu,by.x="ctryCode",by.y="CountryCode")
grep("^United",gdp$X.2)
grep("^United",gdp$ctryName)
grep("^United",gdp2$ctryName)
head(m)
edu
str(edu)
head(m)
m2 <- m[grepl("Fiscal year end: Jun",m$Special.Notes)]
grepl("Fiscal year end: Jun",m$Special.Notes)
m2 <- m[grepl("Fiscal year end: Jun",m$Special.Notes),]
m2
head(h)
strsplit()
strsplit
strsplit(h)
strsplit(h,"wgtp")
splitNmes <- strsplit(names(h),"wgtp")
splitNmes
splitNmes[123,]
gdp
gdp2
gdp3 <- gdp2
gdp3$gdp <-
gsub(",","",gdp3$gdp)
gdp3
gdp3$gdp <- gsub(",","",gdp3$gdp)
head(gdp3)
head(gdp2)
mean(gdp3$gdp)
mean(as.numeric(gdp3$gdp)
)
mean(as.numeric(gdp2$gdp))
mean(as.numeric(gdp3$gdp))
package.install("quantmod")
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
grep("2012-",sampletimes)
grep("2012-",sampleTimes)
head(sampleTimes)
sampleTimes
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
pwd
cd c:
ls
dir
setwd("C:/Users/Fausto/git/RepData_PeerAssessment1")
ls
unzip("activity.zip")
csv <- read.csv("activity.csv")
head(csv)
head(csv,15)
summary(csv)
str(csv)
rawData <- read.csv("activity.csv")
View(csv)
rm(csv)
str(rawData)
stepsPerDay <- aggregate(rawData$steps, list(rawData$date), sum)
str(stepsPerDay)
colnames(dailyStepSum) <- c("date", "steps")
colnames(stepsPerDay) <- c("date", "steps")
str(stepsPerDay)
?tidy
with(stepsPerDay, {
par(oma=c(2,0,0,0), mar=c(6.75,6.75,3,0), mgp=c(5.75,0.75,0), las=2)
barplot(
height=Steps,
main="Total steps per day",
xlab="Dates",
ylab="Steps",
names.arg=Date,
space=c(0)
)
})
str(stepsPerDay)
with(stepsPerDay, {
par(oma=c(2,0,0,0), mar=c(6.75,6.75,3,0), mgp=c(5.75,0.75,0), las=2)
barplot(
height=steps,
main="Total steps per day",
xlab="Dates",
ylab="Steps",
names.arg=Date,
space=c(0)
)
})
with(stepsPerDay, {
par(oma=c(2,0,0,0), mar=c(6.75,6.75,3,0), mgp=c(5.75,0.75,0), las=2)
barplot(
height=steps,
main="Total steps per day",
xlab="Dates",
ylab="Steps",
names.arg=date,
space=c(0)
)
})
with(stepsPerDay, {
par(oma=c(2,0,0,0), mar=c(6.75,6.75,3,0), mgp=c(5.75,0.75,0), las=2)
barplot(
height=steps,
main="Total steps per day",
xlab="Dates",
ylab="Steps",
#names.arg=date,
space=c(0)
)
})
with(stepsPerDay, {
par(oma=c(2,0,0,0), mar=c(6.75,6.75,3,0), mgp=c(5.75,0.75,0), las=2)
barplot(
height=steps,
main="Total steps per day",
xlab="Dates",
ylab="Steps",
#names.arg=date,
space=c(0)
)
})
names.arg=date,
with(stepsPerDay, {
par(oma=c(2,0,0,0), mar=c(6.75,6.75,3,0), mgp=c(5.75,0.75,0), las=2)
barplot(
height=steps,
main="Total steps per day",
xlab="Dates",
ylab="Steps",
names.arg=date,
space=c(0)
)
})
hist(stepsPerDay)
hist(stepsPerDay)
hist
?hist
hist(stepsPerDay$steps)
hist(stepsPerDay$steps, breaks=20, main="as",cex.main='9)')
hist(stepsPerDay$steps, breaks=20, main="as",cex.main='9)'
hist(stepsPerDay$steps, breaks=20, main="as",cex.main='9)
hist(stepsPerDay$steps, breaks=20, main="as",cex.main='9)
hist(stepsPerDay$steps, breaks=20, main="as",cex.main='9)
hist(stepsPerDay$steps, breaks=20, main="as",cex.main=.9)
hist(stepsPerDay)
hist(stepsPerDay$steps)
hist(stepsPerDay$steps,breaks=10)
hist(stepsPerDay$steps,breaks=8)
hist(stepsPerDay$steps,breaks=8)
hist(stepsPerDay$steps,breaks=10)
hist(stepsPerDay$steps,breaks=8)
hist(stepsPerDay$steps,breaks=4)
hist(stepsPerDay$steps)
?hist
hist(stepsPerDay, col="black", main="Total steps per day", xlab="Steps")
hist(stepsPerDay$steps, col="black", main="Total steps per day", xlab="Steps")
hist(stepsPerDay$steps, col="black", main="Total steps per day", xlab="Steps per day")
stepsPerDayMean <- mean(stepsPerDay$steps, na.rm=TRUE)
print(stepsPerDayMean)
intervalSteps <- aggregate(data=rawData, steps~interval, FUN=mean, na.action=na.omit)
colnames(intervalSteps) <- c("interval", "steps")
with(intervalSteps, {
plot(
x=interval,
y=steps,
type="l",
main="Time series plot of the ",
xlab="5-minute Interval",
ylab="Average Steps, Average across all Days"
)
})
plot(
x=intervalSteps$interval,
y=intervalSteps$steps,
type="l",
main="Average steps per interval",
xlab="5-minute interval",
ylab="Average steps across all days"
)
maxInterval <- intervalSteps[intervalSteps$steps==max(intervalSteps$steps),]
print(maxInterval)
maxInterval <- intervalSteps[intervalSteps$steps==max(intervalSteps$steps),c(1)]
print(maxInterval)
dayType <- data.frame(sapply(X=filledData$date, FUN=function(day) {
if (weekdays(as.Date(day)) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) {
day <- "weekday"
}
else {
day <- "weekend"
}
}))
stepValues <- data.frame(rawData$steps)
head(stepValues)
head(stepValues,15)
head(stepValues,150)
head(stepValues,50)
head(stepValues)
stepValues[is.na(stepValues),] <- tapply(X=rawData$steps,INDEX=rawData$interval,FUN=median,na.rm=TRUE)
head(stepValues)
stepValues[is.na(stepValues),] <- tapply(X=rawData$steps,INDEX=rawData$interval,FUN=mean,na.rm=TRUE)
head(stepValues)
stepValues
stepValues <- data.frame(rawData$steps)
stepValues
stepValues[is.na(stepValues),] <- ceiling(tapply(X=originalData$steps,INDEX=rawData$interval,FUN=mean,na.rm=TRUE))
stepValues[is.na(stepValues),] <- ceiling(tapply(X=rawData$steps,INDEX=rawData$interval,FUN=mean,na.rm=TRUE))
stepValues
stepValues[is.na(stepValues),] <- tapply(X=rawData$steps,INDEX=rawData$interval,FUN=mean,na.rm=TRUE)
stepValues
stepValues <- data.frame(rawData$steps)
stepValues
stepValues[is.na(stepValues),] <- tapply(X=rawData$steps,INDEX=rawData$interval,FUN=mean,na.rm=TRUE)
stepValues
stepValues <- data.frame(rawData$steps)
stepValues[is.na(stepValues),] <- tapply(X=rawData$steps,INDEX=rawData$interval,FUN=median,na.rm=TRUE)
stepValues <- data.frame(rawData$steps)
stepValues[is.na(stepValues),] <- tapply(X=rawData$steps,INDEX=rawData$interval,FUN=median,na.rm=TRUE)
stepValues
xyplot(
type="l",
data=dayTypeIntervalSteps,
steps ~ interval | dayType,
xlab="Interval",
ylab="Steps",
layout=c(1,2)
)
library("lattice")
xyplot(
type="l",
data=dayTypeIntervalSteps,
steps ~ interval | dayType,
xlab="Interval",
ylab="Steps",
layout=c(1,2)
)
stepValues <- data.frame(rawData$steps)
stepValues[is.na(stepValues),] <- tapply(X=rawData$steps,INDEX=rawData$interval,FUN=median,na.rm=TRUE)
filledData <- cbind(stepValues, rawData[,2:3])
colnames(filledData) <- c("steps", "date", "interval")
```
Now we will replicate the analysis we did at the beginning of this assignment but working with the new filled data without NAs:
1. First we calculate the total number of steps taken per day:
```{r echo=TRUE}
filledStepsPerDay <- aggregate(filledData$steps, list(filledData$date), sum)
colnames(filledStepsPerDay) <- c("date", "steps")
```
2. We show this aggregated data in a histogram:
```{r echo=TRUE, fig.width=15}
hist(filledStepsPerDay$steps, col="black", main="Total steps per day", xlab="Steps per day")
```
3. Calculate and report the mean and median of the total number of steps taken per day:
```{r echo=TRUE}
# Mean
filledStepsPerDayMean <- mean(filledStepsPerDay$steps, na.rm=TRUE)
print(filledStepsPerDayMean)
#Median
filledStepsPerDayMedian <- median(filledStepsPerDay$steps, na.rm=TRUE)
print(filledStepsPerDayMedian)
```
As we can see comparing the analysis made on both datasets the values differ, being lower with the NAs.
Maybe if we had used a different method to replace the NAs the result may have been different.
In any case we can conclude that having NAs in the data has a big impact on the results.
## Are there differences in activity patterns between weekdays and weekends?
1. Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day:
```{r echo=TRUE}
dayType <- data.frame(sapply(X=filledData$date, FUN=function(day) {
if (weekdays(as.Date(day)) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) {
day <- "weekday"
}
else {
day <- "weekend"
}
}))
filledData <- cbind(filledData, dayType)
colnames(filledData) <- c("steps", "date", "interval", "dayType")
```
2. Aggregate the number of steps by this new variable and interval:
```{r echo=TRUE, tidy=FALSE}
dayTypeIntervalSteps <- aggregate(data=filledData, steps ~ dayType + interval, FUN=mean)
```
3. Make a panel plot containing a time series plot of the 5-minute interval and the average number of steps taken, averaged across all weekday days or weekend days:
```{r echo=TRUE, fig.width=15}
library("lattice")
xyplot(
type="l",
data=dayTypeIntervalSteps,
steps ~ interval | dayType,
xlab="Interval",
ylab="Steps",
layout=c(1,2)
)
